Traceback (most recent call last):
  File "C:\nb\projects\blog\.venv\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\nb\projects\blog\.venv\Lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\nb\projects\blog\.venv\Lib\site-packages\jupyter_core\utils\__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\asyncio\base_events.py", line 650, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Python311\Lib\contextlib.py", line 222, in __aexit__
    await self.gen.athrow(typ, value, traceback)
  File "C:\nb\projects\blog\.venv\Lib\site-packages\nbclient\client.py", line 650, in async_setup_kernel
    yield
  File "C:\nb\projects\blog\.venv\Lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "C:\nb\projects\blog\.venv\Lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\nb\projects\blog\.venv\Lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
z = simulation.position.sel(axis="z")

simulation = simulation.where(z >= 0, drop=True)

simulation.position.plot(hue="axis")
plt.show()
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mIndexError[0m                                Traceback (most recent call last)
Cell [1;32mIn[11], line 3[0m
[0;32m      1[0m z [38;5;241m=[39m simulation[38;5;241m.[39mposition[38;5;241m.[39msel(axis[38;5;241m=[39m[38;5;124m"[39m[38;5;124mz[39m[38;5;124m"[39m)
[1;32m----> 3[0m simulation [38;5;241m=[39m [43msimulation[49m[38;5;241;43m.[39;49m[43mwhere[49m[43m([49m[43mz[49m[43m [49m[38;5;241;43m>[39;49m[38;5;241;43m=[39;49m[43m [49m[38;5;241;43m0[39;49m[43m,[49m[43m [49m[43mdrop[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[0;32m      5[0m simulation[38;5;241m.[39mposition[38;5;241m.[39mplot(hue[38;5;241m=[39m[38;5;124m"[39m[38;5;124maxis[39m[38;5;124m"[39m)
[0;32m      6[0m plt[38;5;241m.[39mshow()

File [1;32mC:\nb\projects\blog\.venv\Lib\site-packages\xarray\core\common.py:1181[0m, in [0;36mDataWithCoords.where[1;34m(self, cond, other, drop)[0m
[0;32m   1178[0m     [38;5;28;01mfor[39;00m dim [38;5;129;01min[39;00m cond[38;5;241m.[39msizes[38;5;241m.[39mkeys():
[0;32m   1179[0m         indexers[dim] [38;5;241m=[39m _get_indexer(dim)
[1;32m-> 1181[0m     [38;5;28mself[39m [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43misel[49m[43m([49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mindexers[49m[43m)[49m
[0;32m   1182[0m     cond [38;5;241m=[39m cond[38;5;241m.[39misel([38;5;241m*[39m[38;5;241m*[39mindexers)
[0;32m   1184[0m [38;5;28;01mreturn[39;00m ops[38;5;241m.[39mwhere_method([38;5;28mself[39m, cond, other)

File [1;32mC:\nb\projects\blog\.venv\Lib\site-packages\xarray\core\dataset.py:2874[0m, in [0;36mDataset.isel[1;34m(self, indexers, drop, missing_dims, **indexers_kwargs)[0m
[0;32m   2872[0m indexers [38;5;241m=[39m either_dict_or_kwargs(indexers, indexers_kwargs, [38;5;124m"[39m[38;5;124misel[39m[38;5;124m"[39m)
[0;32m   2873[0m [38;5;28;01mif[39;00m [38;5;28many[39m(is_fancy_indexer(idx) [38;5;28;01mfor[39;00m idx [38;5;129;01min[39;00m indexers[38;5;241m.[39mvalues()):
[1;32m-> 2874[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_isel_fancy[49m[43m([49m[43mindexers[49m[43m,[49m[43m [49m[43mdrop[49m[38;5;241;43m=[39;49m[43mdrop[49m[43m,[49m[43m [49m[43mmissing_dims[49m[38;5;241;43m=[39;49m[43mmissing_dims[49m[43m)[49m
[0;32m   2876[0m [38;5;66;03m# Much faster algorithm for when all indexers are ints, slices, one-dimensional[39;00m
[0;32m   2877[0m [38;5;66;03m# lists, or zero or one-dimensional np.ndarray's[39;00m
[0;32m   2878[0m indexers [38;5;241m=[39m drop_dims_from_indexers(indexers, [38;5;28mself[39m[38;5;241m.[39mdims, missing_dims)

File [1;32mC:\nb\projects\blog\.venv\Lib\site-packages\xarray\core\dataset.py:2945[0m, in [0;36mDataset._isel_fancy[1;34m(self, indexers, drop, missing_dims)[0m
[0;32m   2942[0m selected [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_replace_with_new_dims(variables, coord_names, indexes)
[0;32m   2944[0m [38;5;66;03m# Extract coordinates from indexers[39;00m
[1;32m-> 2945[0m coord_vars, new_indexes [38;5;241m=[39m [43mselected[49m[38;5;241;43m.[39;49m[43m_get_indexers_coords_and_indexes[49m[43m([49m[43mindexers[49m[43m)[49m
[0;32m   2946[0m variables[38;5;241m.[39mupdate(coord_vars)
[0;32m   2947[0m indexes[38;5;241m.[39mupdate(new_indexes)

File [1;32mC:\nb\projects\blog\.venv\Lib\site-packages\xarray\core\dataset.py:2753[0m, in [0;36mDataset._get_indexers_coords_and_indexes[1;34m(self, indexers)[0m
[0;32m   2749[0m [38;5;66;03m# we don't need to call align() explicitly or check indexes for[39;00m
[0;32m   2750[0m [38;5;66;03m# alignment, because merge_variables already checks for exact alignment[39;00m
[0;32m   2751[0m [38;5;66;03m# between dimension coordinates[39;00m
[0;32m   2752[0m coords, indexes [38;5;241m=[39m merge_coordinates_without_align(coords_list)
[1;32m-> 2753[0m [43massert_coordinate_consistent[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mcoords[49m[43m)[49m
[0;32m   2755[0m [38;5;66;03m# silently drop the conflicted variables.[39;00m
[0;32m   2756[0m attached_coords [38;5;241m=[39m {k: v [38;5;28;01mfor[39;00m k, v [38;5;129;01min[39;00m coords[38;5;241m.[39mitems() [38;5;28;01mif[39;00m k [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39m_variables}

File [1;32mC:\nb\projects\blog\.venv\Lib\site-packages\xarray\core\coordinates.py:769[0m, in [0;36massert_coordinate_consistent[1;34m(obj, coords)[0m
[0;32m    766[0m [38;5;28;01mfor[39;00m k [38;5;129;01min[39;00m obj[38;5;241m.[39mdims:
[0;32m    767[0m     [38;5;66;03m# make sure there are no conflict in dimension coordinates[39;00m
[0;32m    768[0m     [38;5;28;01mif[39;00m k [38;5;129;01min[39;00m coords [38;5;129;01mand[39;00m k [38;5;129;01min[39;00m obj[38;5;241m.[39mcoords [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m coords[k][38;5;241m.[39mequals(obj[k][38;5;241m.[39mvariable):
[1;32m--> 769[0m         [38;5;28;01mraise[39;00m [38;5;167;01mIndexError[39;00m(
[0;32m    770[0m             [38;5;124mf[39m[38;5;124m"[39m[38;5;124mdimension coordinate [39m[38;5;132;01m{[39;00mk[38;5;132;01m!r}[39;00m[38;5;124m conflicts between [39m[38;5;124m"[39m
[0;32m    771[0m             [38;5;124mf[39m[38;5;124m"[39m[38;5;124mindexed and indexing objects:[39m[38;5;130;01m\n[39;00m[38;5;132;01m{[39;00mobj[k][38;5;132;01m}[39;00m[38;5;130;01m\n[39;00m[38;5;124mvs.[39m[38;5;130;01m\n[39;00m[38;5;132;01m{[39;00mcoords[k][38;5;132;01m}[39;00m[38;5;124m"[39m
[0;32m    772[0m         )

[1;31mIndexError[0m: dimension coordinate 'axis' conflicts between indexed and indexing objects:
<xarray.DataArray 'axis' (axis: 3)>
array(['x', 'y', 'z'], dtype='<U1')
Coordinates:
  * axis     (axis) <U1 'x' 'y' 'z'
Attributes:
    long_name:  Axis
vs.
<xarray.Variable ()>
array('z', dtype='<U1')
Attributes:
    long_name:  Axis

